cbind(x,y)
rbind(x,y)
x <- list(1,"a",True, 1+4i)
x <- list(1,"a",T, 1+4i)
x
x <- factor(c("yes","yes","no","yes","no"))
x
table(x)
unclass(x)
x <- c(1,2,NA,10.3)
x
is.na(x)
is.nan(x)
x <- c(1,2,NA,10,3)
is.na(x)
is.nan(x)
x <- c(1,2,NAN,NA,4)
x <- c(1,2,NaN,NA,4)
is.nan(x)
x <-data.frame(foo =1:4, bar = c(T,T,F, F))
x
nrow(x)
ncol(x)
x <-1:3
names(x)
names(x) <- c("foo","bar", "norf")
x
names(x)
x <-list(a=1,b=2,c=3)
$a
a
x
x.a
x[0]
x[1]
x[3]
m <-matrix(1:4, nrow=2,ncol=2)
dimnames(m) <-list(c("a","b"),c("c","d"))
m
x[2]
x[[1]]
x$
1
x$a
x$b
x$d
x <- c("a","b","c","c","d","a")
x
x[1]
x[2]
x[1:4]
x[x>"a"]
u <- x > "a"
u
x[u]
x <-matrix(1:6,2,3)
x[1,]
x[1,2]
x[1,2]
x[1,2,drop=FALSE]
x <- matrix(1:6,2,3)
x[1,]
x[1,,drop=F]
x[1,drop=F]
x <- list(foo = 1:4, bar = 0.6)
x
x[1]
x[2]
x[[1]
]
x$bar
x["bar"]
x[["bar"]]
x <-list(foo =1:4,bar=0.6,baz="hello")
x[c(1,3)]
name <-"foo"
x[[name]]
x$name
x$foo
x <- list(aardvark = 1:5)
x$a
x$aardvark
x[["a"]]
x[["a",exact=F]]
x <- c(1,2,NA,4,NA,5)
bad <- is.na(x)
x[!bad]
airquality[1:6,]
good <-comple.cases(airquality)
good <-complete.cases(airquality)
airquality[good,][1:6,]
quit()
pwd
pwd()
cwd()
dir
hw1_data <- read.csv("~/Training/coursera/Peng-dataAnalysis-R/hw1_data.csv")
View(hw1_data)
hw1_data
View(hw1_data)
View(hw1_data)
hw1_data[47]
hw1_data[[47]]
hw1_data?
fas
con <- url("http://www.jhsph.edu","r")
fix(bad)
hw1_data$Ozone
is.na(hw1_data$Ozone)
hw1_data$Ozone[is.na(hw1_data$Ozone)]
len(hw1_data$Ozone[is.na(hw1_data$Ozone)])
length(hw1_data$Ozone[is.na(hw1_data$Ozone)])
hw1_data$Ozone[[47]]
mean(hw1_data$Ozone[!is.na(hw1_data$Ozone)])
mean(hw1_data$Ozone[is.na(hw1_data$Ozone)])
mean(hw1_data$Temp[hw1_data$Month == 6])
max(hw1_data$Ozone[hw1_data$Month == 5])
hw1_data$Ozone[hw1_data$Month==5]
hw1_data$Ozone[!is.na(hw1_data$Ozone[hw1_data$Month==5])]
may <= c(hw1_data$Month == 5)
may <- c(hw1_data$Month == 5)
may
hw1_data[may]
hw1_data[[may]]
hw1_data$Ozone[may]
!is.na(hw1_data$Ozone[may])
mean(!is.na(hw1_data$Ozone[may]))
max(!is.na(hw1_data$Ozone[may]))
hw1_data$Ozone[!is.na(hw1_data$Ozone[may])]
hw1_data$Ozone > 31
(hw1_data$Ozone > 31 & hw1_data$Temp > 90)
set1 <- (hw1_data$Ozone > 31 & hw1_data$Temp > 90)
hw1_data$Solar.R[set1]
sum(hw1_data$Solar.R[set1])
set2 <- hw1_data$Solar.R[set1]
set1
hw1_data$Solar.R[set1]
set2 <- (hw1_data$Ozone > 31 & hw1_data$Temp > 90 & !is.na(hw1_data$Ozone))
set2
set1
hw1_data$Solar.R[set2]
mean(hw1_data$Solar.R[set2])
may <- (hw1_data$Month == 5 & !is.na(hw1_data$Ozone))
may
max(hw1_data$Ozone[may])
x <- c(1,3,5)
y <- c(3,2,10)
cbind(x,y)
dim(x)
x<-list(2,"a","b",TRUE)
x[[2]]
x<-1:4
y<-2:3
x+y
dim(x)
len(d)
length(x)
x<-c(17,14,4,5,13,12,10)
x
x[x>=10]
x[x>=10]<-4
x
x <- c(1,3,5)
y <- c(3,2,10)
rbind(x,y)
x<-list(2,"a","b",TRUE)
x[[1]]
class(x[[1]])
class(x)
x <-1:4
y <-2
x+y
x<-c(17,14,4,5,13,12,10)
x[x>=11]<-4
x
hw1_data[:-2]
hw1_data[-2:]
hw1_data[-2]
hw1_data[length(hw1_data)]
hw1_data[length(hw1_data),:]
hw1_data[length(hw1_data),]
length(hw1_data)
dim(hw1_data)
dim(hw1_data)[0]
dim(hw1_data)[1]
hw1_data[dim(hw1_data)[1],]
hw1_data[dim(hw1_data)[1]-1:dim(hw1_data)[1],]
len(hw1_data$Ozone)
length(hw1_data$Ozone)
a <- length(hw1_data$Ozone)
hw1_data[a-1:a]
hw1_data[a,]
hw1_data[(a-1):a,]
str(str)
str(lm)
str(ls)
x <- rnorm(100,2,4)
summary(x)
str(x)
f <-gl(40,10)
str(f)
summary(f)
library(datasets)
head(airquality)
str(airquality)
m <- matrix(rnorm(100),10,10)
str(m)
m[, 1]
s <-split(airquality, airquality$Month)
str(s)
if(x > 3) {}
for (i in 1:10) { print(i)}
x <- c("a", "b", "C", "d")
for( i in 1:4) {print x[i]}
for( i in 1:4) {print(x[i])}
for(i in  seq_along(x)){print(x[i])}
for(letter in x){ print(letter)}
for(i in 1:4) print(x[i])
x <- matrix(1:6, 2,3)
for(i in seq_len(nrow(x))) { for(j in seq_len(ncol(x))){print(x[i,j]) }}
count <- 0
while(count <10){ print(count) count<-count+1}
while(count <10){
print(count)
count<- count + 1
}
z<-5
while(z >= && z<=10){
print(z)
}
while(z >= && z<=10){
print(z)
}
while(z >= && z<=10){
print(z)
coin <-rbinom(1,1,0.5)
if(coin == 1) {
z <- z+1
} else {
z <- z -1
}
}
while(z >= && z<=10){
print(z)
coin <-rbinom(1,1,0.5)
if(coin == 1) {
z <- z+1
} else {
z <- z -1
}
}
while(z >= && z<=10){
print(z)
coin <-rbinom(1,1,0.5)
if(coin == 1) {
z <- z+1
} else {
z <- z -1
}
}
x0 <-1
while(z >= 3 && z<=10){
print(z)
coin <-rbinom(1,1,0.5)
if(coin == 1) {
z <- z+1
} else {
z <- z -1
}
}
z
tol <- 1e-8
repeat {
x1 <- computeEstimate()
if( abs(x1 - x0)<tol){
break
} else {
x0 <- x1
}
}
for (i in 1:100){
if(i <= 20) {}
}
for (i in 1:100){
if(i <= 20) {
next
}
print i
}
for (i in 1:100){
if(i <= 20) {
next
}
print i
}
for (i in 1:100){
if(i <= 20) {
next
}
print(i)
}
args(lm)
str(lm)
f <- function(a,b) { a^2}
f(2)
str(f)
f <- function(a,b) {
print(a)
print(b)
}
f(45)
f <- function(a,b=NULL) {
print(a)
print(b)
}
f(45)
args(paste)
args(cat)
paste("a","b",sep=":")
paste("a","b",se=":")
paste("a","b",sep=":")
paste("a","e",sep="bl")
search()
library(survival)
search()
library(lattices)
library(lattice)
search()
f <- function(x,y){
x^2 + y/z
}
environment(f)
parent.env(environment(f))
make.power <- function(n) {}
make.power <- function(n) {
pow <- funciotn(x) {
x^n
}
pow
}
make.power <- function(n) {
pow <- function(x) {
x^n
}
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
exit
quit
}
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
cube <- make.power(3)
square <- make.power(2)
square(3)
square(19)
cube(19)
environment(cube)
ls(environment(cube))
get("n", environment(cube))
make.NegLogLik <- function(data, fixed=c(FALSE,FALSE)) {
params <- fixed
function(p) {
params[!fixed] <-p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b<- -0.5*sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
}
make.NegLogLik <- function(data, fixed=c(FALSE,FALSE)) {
params <- fixed
function(p) {
params[!fixed] <-p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b<- -0.5*sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
set.seed(1); normals <-rnorm(100,1,2
)
nLL <- make.NegLogLik(normals
)
nLL
ls(environment(nLL))
optim(c(mu=0,sigma=1),nLL)$par
nLL <- make.NegLogLik(normals,c(FALSE,2))
optimize(nLL, c(-1,3))$minimum
nLL <- make.NegLogLik(normals,c(1,FALSE))
optimize(nLL, c(1e-6,10))$minimium
nLL <- make.NegLogLik(normals,c(1,FALSE))
optimize(nLL, c(1e-6,10))$minimium
nLL <- make.NegLogLik(normals,c(1,FALSE))
optimize(nLL, c(1e-6,10))$minimium
nLL
nLL <-make.NegLogLik(normals, c(1,FALSE))
x<-seq(1.7,1.9,len=100)
y <-sapply(x,nLL)
plot(x,exp(-(y-min(y))),type="l")
nLL <- make.NegLogLik(normals,c(FALSE,2))
x <- seq(0.5,1.5, len=100)
y <-sapply(x,nLL)
plot(x,exp(-(y-min(y))),type="l")
str(mapply)
list(rep(1,4),rep(2,3),rep(3,2),rep(4,1))
mapply(rep, 1:4, 4:1)
str(tapply)
x <- c(rnorm(10, runif(10, rnorm(10,1))))
x <- c(rnorm(10), runif(10), rnorm(10,1))
f<- gl(3,10)
f
tapply(x,f,mean)
tapply(x,f,mean, simplify=FALSE)
tapply(x,f, range)
str(split)
split(x,f)
lapply(split(x,f),mean)
tapply(x,f,mean)
head(airquality)
s<-split(airquality,airquality$Month)
lapply(s,function(x) colMeans(x[, c("Ozone","Solar.R", "Wind")]))
sapply(s,function(x) colMeans(x[, c("Ozone","Solar.R", "Wind")]))
sapply(s,function(x) colMeans(x[, c("Ozone","Solar.R", "Wind")], na.rm=TRUE))
x <- rnorm(10)
f1 <- gl(2,5)
f2 <- gl(5,2)
f1
f2
interaction(f1,f2)
str(split(x,list(f1,f2)))
str(split(x,list(f1,f2),drop=T))
x
x <- matrix(rnorm(200),20,10)
apply(x,2,mean)
apply(x,1,sum)
x
apply(x,1,quantile, probs = c(0.25, 0.75))
a <- array(rnorm(2*2*10), c(2,2,10))
apply(a, c(1,2),mean)
rowMeans(a, dims=2)
apply(a, c(1,3),mean)
quit()
install.packages("knitr")
library(knitr)
library(knitr)
library(xtable)
install.packages("xtable")
install.packages("xtable")
install.packages("xtable")
chooseCRANmirror()
setRepositories()
setRepositories()
utils:::menuInstallPkgs()
q()
update.packages(ask='graphics',checkBuilt=TRUE)
utils:::menuInstallPkgs()
load(installr)
load('installr')
require(installr)
updateR()
setInternet2(TRUE)
updateR()
quit()
install.packages(c("rzmq","repr","IRkernel","IRdisplay"),repos="http://irkernel.github.io/")
chooseCRANmirror()
setRepositories()
install.packages('readr', repos='http://cran_mirror.opr.statefarm.org/', dependencies = TRUE)
install.packages(c("rzmq","repr","IRkernel","IRdisplay"),repos="http://cran_mirror.opr.statefarm.org")
quit
quit()
install.packages()
install.packages("ggplot",dependencies=TRUE)
utils:::menuInstallPkgs()
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
                 repos = c('http://irkernel.github.io/', getOption('repos')),
                 type = 'source')
install.packages('repr')
utils:::menuInstallPkgs()
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
                 repos = c('http://irkernel.github.io/', getOption('repos')),
                 type = 'source')
utils:::menuInstallPkgs()
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
                 repos = c('http://irkernel.github.io/', getOption('repos')),
                 type = 'source')
utils:::menuInstallPkgs()
install.packages('rzmq', repos=c('http://irkernel.github.io/',getOption('repos')))
quit()
source("C:\\Users\\kesj\\code\\Vector-Autoregressive-Mode-IRF\\VARmodel.R")
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
source("C:\\Users\\kesj\\code\\Vector-Autoregressive-Mode-IRF\\VARmodel.R")
utils:::menuInstallPkgs()
source("C:\\Users\\kesj\\code\\Vector-Autoregressive-Mode-IRF\\VARmodel.R")
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
source("C:\\Users\\kesj\\code\\Vector-Autoregressive-Mode-IRF\\VARmodel.R")
source("C:\\Users\\kesj\\code\\Vector-Autoregressive-Mode-IRF\\VARmodel.R")
source("C:\\Users\\kesj\\code\\Vector-Autoregressive-Mode-IRF\\VARmodel.R")
source("C:\\Users\\kesj\\code\\Vector-Autoregressive-Mode-IRF\\VARmodel.R")
q()
